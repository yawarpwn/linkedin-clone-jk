import Head from 'next/head'
import { getSession, signOut, useSession } from 'next-auth/react'
import Header from 'components/Header'
import Sidebar from 'components/Sidebar'
import Widgets from 'components/Widgets'
import Feed from 'components/Feed'
import { useRouter } from 'next/router'
import { AnimatePresence } from 'framer-motion'
import Modal from 'components/Modal'
import { modalState, modalTypeState } from 'atoms/modalAtom'
import { useRecoilState } from 'recoil'
import { connectToDatabase } from 'util/mongodb'

export default function Home({ posts, articles }) {
  const [modalOpen, setModalOpen] = useRecoilState(modalState)
  const [modalType, setModalType] = useRecoilState(modalTypeState)
  const router = useRouter()
  const { status } = useSession({
    required: true,
    onUnauthenticated() {
      router.push('/home')
    },
  })

  return (
    <div className='h-screen overflow-y-scroll bg-[#f3f2ef] dark:bg-black dark:text-white md:space-y-6'>
      <Head>
        <title>Feed | LinkedIn</title>
        <meta name='description' content='Generated by create next app' />
        <link rel='icon' href='/favicon.ico' />
      </Head>
      <Header />
      <main className='flex justify-center gap-x-5 px-4 sm:px-12'>
        <div className='flex flex-col gap-x-5 md:flex-row'>
          <Sidebar />
          <Feed posts={posts} />
        </div>
        {/* <Widgets /> */}
        <Widgets articles={articles} />
        <AnimatePresence>
          {modalOpen && (
            <Modal handleClose={() => setModalOpen(false)} type={modalType} />
          )}
        </AnimatePresence>
      </main>
    </div>
  )
}

export async function getServerSideProps(context) {
  const session = await getSession(context)
  if (!session) {
    return {
      redirect: {
        permanent: false,
        destination: '/home',
      },
    }
  }

  // get posts on SSR
  const { db } = await connectToDatabase()
  const posts = await db
    .collection('posts')
    .find()
    .sort({ timestamp: -1 })
    .toArray()

  // get google news api
  const url =
    'https://newsapi.org/v2/everything?' +
    'q=Apple&' +
    'from=2022-07-03&' +
    'sortBy=popularity&' +
    `apiKey=${process.env.NEWS_API_KEY}`

  const  articles  = await fetch(url).then(res => res.json())

  return {
    props: {
      session,
      articles,
      posts: posts.map((post) => ({
        _id: post._id.toString(),
        input: post.input,
        photoUrl: post.photoUrl,
        username: post.username,
        email: post.email,
        userImg: post.userImg,
        createdAt: post.createdAt,
      })),
    },
  }
}
